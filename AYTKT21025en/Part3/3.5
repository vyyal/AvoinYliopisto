3.5

CURRENT FRONTEDN SIZE
=====================
35_frontend           latest              e33fe04e39b0        7 minutes ago       60.3MB

PREVIOUS FRONTEND SIZE
=======================

34_frontend           latest              282570886509        2 weeks ago         257MB



RUNNING CONTAINERS
===================

vyyalacn@UbuntuDocker:~/devops/3.5$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
b9e7d2b8180f        nginx               "nginx-debug -g 'dae…"   7 minutes ago       Up 7 minutes        0.0.0.0:80->80/tcp       nginx
03e274ee6bc5        35_backend          "npm start"              7 minutes ago       Up 7 minutes        0.0.0.0:8000->8000/tcp   backend
9e30e65e73b8        35_frontend         "serve -s -l 5000 di…"   7 minutes ago       Up 7 minutes        0.0.0.0:5000->5000/tcp   frontend
f19e61bba870        postgres            "docker-entrypoint.s…"   7 minutes ago       Up 7 minutes        5432/tcp                 db-server
f7b54cc24fae        adminer             "entrypoint.sh docke…"   7 minutes ago       Up 7 minutes        0.0.0.0:8080->8080/tcp   35_adminer_1
9f2794a09d89        redis               "docker-entrypoint.s…"   7 minutes ago       Up 7 minutes        6379/tcp                 redis-server


DOCKER-COMPOSE FILE

vyyalacn@UbuntuDocker:~/devops/3.5$ cat docker-compose.yml
version: '3'

services:
    redis:
      image: redis
      container_name: redis-server

    nginx:
      image: nginx
      container_name: nginx
      ports:
        - 80:80
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
        - ./curl-format.txt:/etc/curl-format.txt
      depends_on:
        - "backend"
      command: [nginx-debug, '-g', 'daemon off;']

    frontend:
      build: frontend
      ports:
        - 5000:5000
      container_name: frontend
      entrypoint: serve -s -l 5000 dist

    backend:
      build: backend
      ports:
        - 8000:8000
      container_name: backend
      entrypoint: npm start
      environment:
        - REDIS=redis-server
        - REDIS_port=6379
        - DB_USERNAME=postgres
        - DB_PASSWORD=MikkiHiiri
        - DB_NAME=backenddb
        - DB_HOST=db-server
      depends_on:
        - "redis"
        - "db"

    db:
      image: postgres
      restart: always
      container_name: db-server
      environment:
        - POSTGRES_PASSWORD=MikkiHiiri
        - POSTGRES_USER=postgres
        - POSTGRES_DB=backenddb
      volumes:
        - ./database:/var/lib/postgresql/data

    adminer:
      image: adminer
      restart: always
      ports:
        - 8080:8080



    DOCKERFILES
    =============

    vyyalacn@UbuntuDocker:~/devops/3.5$ cat frontend/Dockerfile
FROM node:alpine AS build-stage

ENV API_URL=http://localhost:8000

RUN apk add git && \
    git clone https://github.com/docker-hy/frontend-example-docker.git /app && \
    cd /app && \
    npm install webpack && \
    addgroup -S app && \
    adduser -S app && \
    chown -R app:app /app && \
    cd /app && \
    node

WORKDIR /app

RUN npm run build


FROM alpine:latest

RUN mkdir /app && \
    addgroup -S app && \
    adduser -S app && \
    chown -R app:app /app


COPY --from=build-stage /app/dist /app/dist

RUN apk add --update nodejs npm && \
    npm install -g serve

EXPOSE 5000

USER app

WORKDIR /app

vyyalacn@UbuntuDocker:~/devops/3.5$ cat backend/Dockerfile
FROM node:alpine

ENV FRONT_URL=http://localhost:5000

RUN apk add git && \
    git clone https://github.com/docker-hy/backend-example-docker.git /app && \
    cd /app && \
    npm install webpack && \
    addgroup -S app && \
    adduser -S app && \
    chown -R app:app /app

EXPOSE 8000

USER app

WORKDIR /app

#CMD ["node"]

