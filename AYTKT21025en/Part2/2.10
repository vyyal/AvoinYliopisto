2.10

No changes required


vyyalacn@UbuntuDocker:~/devops/2.9$ cat frontend/Dockerfile

FROM ubuntu:18.04

ENV API_URL=http://localhost:8000

WORKDIR /frontend-example-docker

RUN apt-get update && apt-get install -y wget curl git

RUN git clone https://github.com/docker-hy/frontend-example-docker.git /frontend-example-docker

RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
RUN apt install -y nodejs

RUN npm install webpack

EXPOSE 5000

CMD ["/bin/bash"]


vyyalacn@UbuntuDocker:~/devops/2.9$ cat backend/Dockerfile
FROM ubuntu:18.04

ENV FRONT_URL=http://localhost:5000

WORKDIR /backend-example-docker

RUN apt-get update && apt-get install -y curl git

RUN git clone https://github.com/docker-hy/backend-example-docker.git /backend-example-docker

RUN curl -sL https://deb.nodesource.com/setup_10.x | bash
RUN apt install -y nodejs

RUN npm install webpack

EXPOSE 8000


CMD ["/bin/bash"]



vyyalacn@UbuntuDocker:~/devops/2.9$ cat nginx.conf
events { worker_connections 1024; }

http {
  server {
    listen 80;

    location / {
      proxy_pass http://frontend:5000;
    }

    location /api/ping {
      proxy_pass http://backend:8000/ping;
    }
  }
}




vyyalacn@UbuntuDocker:~/devops/2.9$ cat docker-compose.yml
version: '3'

services:
    redis:
      image: redis
      container_name: redis-server

    nginx:
      image: nginx
      container_name: nginx
      ports:
        - 80:80
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
        - ./curl-format.txt:/etc/curl-format.txt
      depends_on:
        - "backend"
      command: [nginx-debug, '-g', 'daemon off;']

    frontend:
      build: frontend
      ports:
        - 5000:5000
      container_name: frontend
      entrypoint: npm start

    backend:
      build: backend
      ports:
        - 8000:8000
      container_name: backend
      entrypoint: npm start
      environment:
        - REDIS=redis-server
        - REDIS_port=6379
        - DB_USERNAME=postgres
        - DB_PASSWORD=MikkiHiiri
        - DB_NAME=backenddb
        - DB_HOST=db-server
      depends_on:
        - "redis"
        - "db"

    db:
      image: postgres
      restart: always
      container_name: db-server
      environment:
        - POSTGRES_PASSWORD=MikkiHiiri
        - POSTGRES_USER=postgres
        - POSTGRES_DB=backenddb
      volumes:
        - ./database:/var/lib/postgresql/data

    adminer:
      image: adminer
      restart: always
      ports:
        - 8080:8080

